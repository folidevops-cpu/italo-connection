generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  phone              String?             @unique
  emailVerified      Boolean             @default(false)
  phoneVerified      Boolean             @default(false)
  passwordHash       String
  role               String              @default("USER")
  suspended          Boolean             @default(false)
  suspendedAt        DateTime?
  suspensionReason   String?
  resetToken         String?
  resetTokenExpiry   DateTime?
  twoFactorSecret    String?             // Stores OTP code temporarily
  twoFactorExpiry    DateTime?           // OTP expiration time
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auditLogs          AuditLog[]
  listings           Listing[]
  services           Service[]
  notifications      Notification[]
  profile            Profile?
  verificationTokens VerificationToken[]
  reportsSubmitted   UserReport[]        @relation("ReporterReports")
  reportsReceived    UserReport[]        @relation("ReportedUserReports")

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  
  // Personal Information
  firstName   String?
  middleName  String?
  surname     String?
  displayName String?  @unique
  bio         String?
  nationality String?
  maritalStatus String? // single, married, prefer_not_say
  
  // Residence Information
  street      String?
  streetNumber String?
  town        String?
  province    String? // Italian provinces only
  cap         String? // Italian postal code (Codice di Avviamento Postale)
  googlePlaceId String? // For Google Places API integration
  
  // Social Media Links
  facebookUrl  String?
  instagramUrl String?
  tiktokUrl    String?
  
  // Contact Information
  phone        String?
  whatsapp     String?
  
  // Other
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Listing {
  id            String    @id @default(cuid())
  ownerId       String
  type          String
  title         String
  description   String
  price         Decimal   @db.Decimal(10, 2)
  status        String    @default("PENDING")
  availableFrom DateTime?
  capacity      Int?
  sharedSlots   Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  media         Media[]

  @@map("listings")
}

model Media {
  id        String   @id @default(cuid())
  listingId String
  url       String
  key       String
  type      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("media")
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  type      String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  channel   String   @default("IN_APP")
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String?
  message   String
  type      String   @default("info") // info, warning, success, error
  isActive  Boolean  @default(false)
  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

model UserReport {
  id           String   @id @default(cuid())
  reporterId   String?  // Null if reported by anonymous/non-logged-in user
  reportedUserId String
  reason       String   // harassment, spam, inappropriate, fraud, other
  description  String
  status       String   @default("PENDING") // PENDING, REVIEWED, RESOLVED, DISMISSED
  adminNote    String?  // Admin notes about the report
  reviewedBy   String?
  reviewedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  reporter     User?    @relation("ReporterReports", fields: [reporterId], references: [id], onDelete: SetNull)
  reportedUser User     @relation("ReportedUserReports", fields: [reportedUserId], references: [id], onDelete: Cascade)

  @@map("user_reports")
}

model ServiceType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  @@map("service_types")
}

model Service {
  id            String      @id @default(cuid())
  ownerId       String
  serviceTypeId String
  name          String
  description   String
  location      String
  price         Decimal     @db.Decimal(10, 2)
  status        String      @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  owner         User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Restrict)
  media         ServiceMedia[]

  @@map("services")
}

model ServiceMedia {
  id        String   @id @default(cuid())
  serviceId String
  url       String
  key       String
  type      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_media")
}
